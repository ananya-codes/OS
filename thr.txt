 1
 #include <stdlib.h>
 #include <stdio.h>
 #include <unistd.h>
 #include <sys/wait.h>
 #include <sys/types.h>
 #include <pthread.h>
 void print_hw() {
  printf("Hello World!!\n");
  return pthread_exit(0);
 }
 int main() {
  pthread_t threads[5];
  for (int i = 0; i < 5; i++) {
  int j = pthread_create(&threads[i], NULL, (void*)print_hw, NULL);
  if (!j) {
  pthread_join(threads[i], NULL);
  }
  }
  return 0;
 }

 2
 #include <stdlib.h>
 #include <stdio.h>
 #include <unistd.h>
 #include <sys/wait.h>
 #include <sys/types.h>
 #include <pthread.h>
 struct arg_struct {
  char *name;
  int hall_no;
  int emp_id;
  char *branch;
 };
 void print_info(void *argument) {
  struct arg_struct arg = *(struct arg_struct *) argument;
  printf("Emp ID: %d\nName: %s\nHall No.: %d\nBranch: %s\n\n",
 arg.emp_id, arg.name, arg.hall_no, arg.branch);
  return pthread_exit(0);
 }
 int main() {
  pthread_t t1,t2;
  struct arg_struct a1,a2;
  a1.emp_id = 1;
  a1.name = "His Imperial Majesty";
  a1.hall_no = 20;
  a1.branch = "Executive";
  a2.emp_id = 2;
  a2.name = "Prime Minister";
  a2.hall_no = 10;
  a2.branch = "Legislative";
  pthread_create(&t1, NULL, (void *)print_info, (void *)&a1);
  pthread_create(&t2, NULL, (void *)print_info, (void *)&a2);
  pthread_join(t1, NULL);
  pthread_join(t2, NULL);
  return 0;
 }

 3
 #include <stdlib.h>
 #include <stdio.h>
 #include <unistd.h>
 #include <sys/wait.h>
 #include <sys/types.h>
 #include <pthread.h>
 int balance = 1000;
 void deposit() {
  printf("Opening Balance: %d\n", balance);
  for (int i = 0; i < 50; i++)
  balance += 50;
  printf("Closing Balance: %d\n", balance);
  return pthread_exit(0);
 }
 void withdraw() {
  printf("Opening Balance: %d\n", balance);
  for (int i = 0; i < 20; i++)
  balance -= 20;
  printf("Closing Balance: %d\n", balance);
  return pthread_exit(0);
 }
 int main() {
  pthread_t t1,t2;
  pthread_create(&t1, NULL, (void *)deposit, NULL);
  pthread_create(&t2, NULL, (void *)withdraw, NULL);
  pthread_join(t1, NULL);
  pthread_join(t2, NULL);
  return 0;
 }

 4
 #include <stdlib.h>
 #include <stdio.h>
 #include <unistd.h>
 #include <sys/wait.h>
 #include <sys/types.h>
 #include <pthread.h>
 int account = 500;
 int lock = 0;
 int test_and_set(int *flag) {
  int old = *flag;
  *flag = 1;
  return old;
 }
 void acquire(int lock) {
  while(test_and_set(&lock));
 }
 void release(int lock) {
  lock = 0;
 }
 int withdraw(void* amount) {
  int amt = *(int *)amount;
  while (lock != 1 || amt > account);
  account -= amt;
  if (account < 1000) {
  acquire(lock);
  }
  return account;
 }
 int deposit(void* amount) {
  int amt = *(int *) amount;
  account += amt;
  if (account >= 1000) {
  printf("Balance > 0, Lock Released\n");
  release(lock);
  }
 }
 int main() {
  pthread_t t1,t2;
  pthread_create(&t1, NULL, (void *)withdraw, (void *)1000);
  pthread_join(t1, NULL);
  pthread_create(&t2, NULL, (void *)deposit, (void *)800);
  pthread_join(t2, NULL);
 }

 5
 #include <pthread.h> 
 #include <stdio.h> 
 #include <stdlib.h> 
 #include <math.h> 
 #define threadCount 4 
 void *threadFn(void *t){ 
 int i; 
 long tid; 
 double sum=0.0; 
 tid = (long)t; 
 printf("Thread %ld starting...\n",tid); 
 for (i=0; i<1000; i++){ 
 sum += sin((double)i) * tan((double)i); 
 } 
 printf("Thread %ld done. Result = %e\n",tid, sum); 
 pthread_exit((void*) t); 
 } 
 int main (int argc, char *argv[]){ 
 pthread_t thread[threadCount]; 
 pthread_attr_t attr; 
 int rc; 
 long t; 
 void *status; 
 /* Initialize and set thread detached attribute */ 
 pthread_attr_init(&attr); 
 pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE); for(t=0; t<threadCount; t++) { 
 printf("Main: creating thread %ld\n", t); 
 rc = pthread_create(&thread[t], &attr, threadFn, (void *)t); 
 if (rc) { 
 printf("ERROR; return code from pthread_create() is %d\n", rc); 
 exit(-1); 
 } 
 } 
 /* Free attribute and wait for the other threads */ 
 pthread_attr_destroy(&attr); 
 for(t=0; t<threadCount; t++) { 
 rc = pthread_join(thread[t], &status); 
 if (rc) { 
 printf("ERROR; return code from pthread_join() is %d\n", rc); 
 exit(-1); 
 }
 printf("Main: completed join with thread %ld having a status of %ld\n",t,(long)status); 
 } 
 printf("Main: program completed. Exiting.\n"); 
 pthread_exit(NULL); 
 }

 6
 #include <stdlib.h>
 #include <stdio.h>
 #include <unistd.h>
 #include <sys/wait.h>
 #include <sys/types.h>
 #include <pthread.h>
 #include <math.h>
 struct TData {
  pthread_t tid;
  int index;
 };
 struct TData thread_data[10] = {0};
 double sq_arr[10];
 void compute_root(void* i) {
  int *index = (int *)i;
  double *root = (double *)malloc(sizeof(double));
  *root = sqrt(*index);
  return pthread_exit((void *)root);
 }
 int main() {
  pthread_t t[10];
  for (int i = 0; i < 10; i++) {
  thread_data[i].index = i;
  pthread_create(&thread_data[i].tid, NULL, (void
 *)compute_root, (void *)&thread_data[i].index);
  }
  for (int i = 0; i < 10; i++) {
  double *temp;
  pthread_join(thread_data[i].tid, (void *) &temp);
  sq_arr[thread_data[i].index] = *temp;
  free(temp);
  }
  for (int i = 0; i < 10; i++) {
  printf("Sq. Root of %d = %lf\n", i, sq_arr[i]);
  }
  return 0;
 }

 7
 #include <stdlib.h>
 #include <stdio.h>
 #include <unistd.h>
 #include <sys/wait.h>
 #include <sys/types.h>
 #include <pthread.h>
 #include <math.h>
 #define THRESHOLD 20
 #define CONT_LIM 30
 int count = 0;
 pthread_mutex_t count_mutex;
 pthread_cond_t count_threshold_cv;
 void *inc_count(void *t) {
  int i;
  long my_id = (long)t;
  for (i = 0; i < THRESHOLD; i++) {
  pthread_mutex_lock(&count_mutex);
  count++;
  if (count == CONT_LIM) {
  printf("%d - inc_count(): thread %ld, count = %d
 Threshold reached. ",i,
  my_id, count);
  pthread_cond_signal(&count_threshold_cv);
  printf("Just Sent Signal!\n");
  }
  printf("%d - inc_count(): thread %ld, count = %d,
 unlocking mutex\n", i,
  my_id, count);
  pthread_mutex_unlock(&count_mutex);
  sleep(1);
  }
  pthread_exit(NULL);
 }
 void *watch_count(void *t) {
  long my_id = (long)t;
  printf("Starting watch_count(): thread %ld\n", my_id);
  pthread_mutex_lock(&count_mutex);
  while (count < CONT_LIM) {
  printf("watch_count(): thread %ld Count= %d. Going into
 wait...\n", my_id,count);
  pthread_cond_wait(&count_threshold_cv, &count_mutex);
  printf("watch_count(): thread %ld Condition signal
 received. Count= %d\n", my_id,count);
  printf("watch_count(): thread %ld Updating the value of
 count...\n", my_id,count);
  printf("watch_count(): thread %ld count now = %d.\n",
 my_id, count);
  printf("watch_count(): thread %ld Unlocking mutex.\n",
 my_id);
  pthread_mutex_unlock(&count_mutex);
  sleep(1);
  pthread_exit(NULL);
  }
 }
 int main() {
  int i, rc;
  long t[3];
  for (i = 0; i < 3; i++) {
  t[i] = i+1;
  }
  pthread_t threads[3];
  pthread_attr_t attr;
  pthread_mutex_init(&count_mutex, NULL);
  pthread_cond_init(&count_threshold_cv, NULL);
  pthread_attr_init(&attr);
  pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);
  for (int i = 0; i < 3; i++) {
  if (i == 0) {
  pthread_create(&threads[i], &attr, watch_count,
 (void *)t[i]);
  } else {
  pthread_create(&threads[i], &attr, inc_count, (void
 *)t[i]);
  }
  }
  for (int i = 0; i < 3; i++) {
  pthread_join(threads[i], NULL);
  }
  printf ("Main(): Waited and joined with %d threads. Final
 value of count = %d. Done.\n",
  3, count);

  pthread_attr_destroy(&attr);
  pthread_mutex_destroy(&count_mutex);
  pthread_cond_destroy(&count_threshold_cv);
  pthread_exit(NULL);
 }

 8
 #include <stdlib.h>
 #include <stdio.h>
 #include <unistd.h>
 #include <sys/wait.h>
 #include <sys/types.h>
 #include <pthread.h>
 #include <semaphore.h>
 int r1,total_produced=0,total_consume=0;
 sem_t notEmpty;
 void* produce(void *arg){
  while(1){
  printf("Producer produces item.\n");
  printf("Total produced = %d Total consume = %d\n",
 total_produced, total_consume*-1);
  sem_post(&notEmpty);
  sleep(rand()%100*0.01);
  }
 }
 void* consume(void *arg){
  while(1){
  sem_wait(&notEmpty);
  printf("Consumer consumes item.\n");
  printf("Total produced = %d Total consume =
 %d",total_produced, (--total_consume)*-1);
  sleep(rand()%100*0.01);
  }
 }
 int main(int argv,char *argc[]){
   thread declaration
  pthread_t producer,consumer;
   Declaration of attribute......
  pthread_attr_t attr;
   semaphore initialization
  sem_init(&notEmpty,0,0);
   pthread_attr_t initialization
  pthread_attr_init(&attr);
  pthread_attr_setdetachstate(&attr,PTHREAD_CREATE_JOINABLE);
   Creation of process
  r1=pthread_create(&producer,&attr,produce,NULL);
  if(r1){
  printf("Error in creating thread\n");
  exit(-1);
  }
  r1=pthread_create(&consumer,&attr,consume,NULL);
  if(r1){
  printf("Error in creating thread\n");
  exit(-1);
  }
   destroying the pthread_attr
  pthread_attr_destroy(&attr);
   Joining the thread
  r1=pthread_join(producer,NULL);
  if(r1){
  printf("Error in joining thread\n");
  exit(-1);
  }
  r1=pthread_join(consumer,NULL);
  if(r1){
  printf("Error in joining thread\n");
  exit(-1);
  }
  pthread_exit(NULL);
  return 0;
 }