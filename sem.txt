1
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#define NUM_PHILOSOPHERS 5
#define NUM_CHOPSTICKS 5 
void dine(int n);
pthread_t philosopher[NUM_PHILOSOPHERS];
pthread_mutex_t chopstick[NUM_CHOPSTICKS];
 
int main()
{
  int i, status_message;
  void *msg;
 
  for (i = 1; i <= NUM_CHOPSTICKS; i++)
  {
	status_message = pthread_mutex_init(&chopstick[i], NULL);
 
	if (status_message == -1)
	{
      printf("\n Mutex initialization failed");
      exit(1);
	}
  }
 
  for (i = 1; i <= NUM_PHILOSOPHERS; i++)
  {
    status_message = pthread_create(&philosopher[i], NULL, (void *)dine, (int *)i);
	if (status_message != 0)
	{
      printf("\n Thread creation error \n");
      exit(1);
	}
  }
 
  for (i = 1; i <= NUM_PHILOSOPHERS; i++)
  {
    status_message = pthread_join(philosopher[i], &msg);
	if (status_message != 0)
	{
      printf("\n Thread join failed \n");
      exit(1);
	}
  }
 
  for (i = 1; i <= NUM_CHOPSTICKS; i++)
  {
    status_message = pthread_mutex_destroy(&chopstick[i]);
	if (status_message != 0)
	{
      printf("\n Mutex Destroyed \n");
      exit(1);
	}
  }
  return 0;
}
void dine(int n)
{
  printf("\nPhilosopher % d is thinking ", n);
 
  pthread_mutex_lock(&chopstick[n]);
 
  pthread_mutex_lock(&chopstick[(n + 1) % NUM_CHOPSTICKS]);
 
  printf("\nPhilosopher % d is eating ", n);
  sleep(3);
 
  pthread_mutex_unlock(&chopstick[n]);
 
  pthread_mutex_unlock(&chopstick[(n + 1) % NUM_CHOPSTICKS]);
 
  printf("\nPhilosopher % d Finished eating ", n);
}




2

#include <stdio.h>
#include <pthread.h>
#include <string.h>
#define SIZE 5
pthread_mutex_t t_mutex;
pthread_cond_t cond_c, cond_p;
char ch;
FILE *fp ;
char items[SIZE];
int front = -1, rear =-1;
int isFull()
{
if( (front == rear + 1) || (front == 0 && rear == SIZE-1)) return 1;
return 0;
}
int isEmpty()
{
if(front == -1)
return 1;
return 0;
}
 void enQueue(int element)
{
if(isFull()) printf("\n Queue is full!! \n");
else
{
 if(front == -1) front = 0;
rear = (rear + 1) % SIZE;
items[rear] = element;
}
}


int deQueue()
{
int element;
if(isEmpty()) {
printf("\n Queue is empty !! \n");
return(-1);
} else {
element = items[front];
if (front == rear){
front = -1;
rear = -1;
}
else {
front = (front + 1) % SIZE;
 
}
return(element);
}
}


void* producer(void *ptr) {
while (!feof(fp)) {
pthread_mutex_lock(&t_mutex);
while (isFull())
pthread_cond_wait(&cond_p, &t_mutex);
fread(&ch, 1, 1 , fp);
enQueue(ch);
pthread_cond_signal(&cond_c);
pthread_mutex_unlock(&t_mutex);
}
pthread_exit(0);
}
void* consumer(void *ptr) {
while (!feof(fp)) {
pthread_mutex_lock(&t_mutex); 
while (isEmpty())
pthread_cond_wait(&cond_c, &t_mutex);
printf(" %c", deQueue());
pthread_cond_signal(&cond_p);
pthread_mutex_unlock(&t_mutex);
}
pthread_exit(0);
}
int main(int argc, char **argv) {
pthread_t pro, con;
fp = fopen("string.txt", "r");
if (fp == 0)
//printf("Failed to open string.txt for reading\n");
printf("\n File string.txt opened for reading\n\n");
pthread_mutex_init(&t_mutex, NULL);
pthread_cond_init(&cond_c, NULL);
pthread_cond_init(&cond_p, NULL);
pthread_create(&con, NULL, consumer, NULL);
pthread_create(&pro, NULL, producer, NULL);
 pthread_join(con, NULL);
pthread_join(pro, NULL);
pthread_mutex_destroy(&t_mutex); 
pthread_cond_destroy(&cond_c);
pthread_cond_destroy(&cond_p);
fclose(fp);
}










3
#include <pthread.h>
#include <semaphore.h>
#include <stdlib.h>
#include <stdio.h>
#define MaxItems 5
 #define BufferSize 5
sem_t empty;
sem_t full;
int in = 0;
int out = 0;
int buffer[BufferSize];
pthread_mutex_t mutex;

void *producer(void *pno)
{   
    int item;
    for(int i = 0; i < MaxItems; i++) {
        item = rand(); // Produce an random item
        sem_wait(&empty);
        pthread_mutex_lock(&mutex);
        buffer[in] = item;
        printf("Producer %d: Insert Item %d at %d\n", *((int *)pno),buffer[in],in);
        in = (in+1)%BufferSize;
        pthread_mutex_unlock(&mutex);
        sem_post(&full);
    }
}
void *consumer(void *cno)
{   
    for(int i = 0; i < MaxItems; i++) {
        sem_wait(&full);
        pthread_mutex_lock(&mutex);
        int item = buffer[out];
        printf("Consumer %d: Remove Item %d from %d\n",*((int *)cno),item, out);
        out = (out+1)%BufferSize;
        pthread_mutex_unlock(&mutex);
        sem_post(&empty);
    }
}

int main()
{   
    pthread_t pro[5],con[5];
    pthread_mutex_init(&mutex, NULL);
    sem_init(&empty,0,BufferSize);
    sem_init(&full,0,0);
    int a[5] = {1,2,3,4,5};     for(int i = 0; i < 5; i++) {
        pthread_create(&pro[i], NULL, (void *)producer, (void *)&a[i]);
    }
    for(int i = 0; i < 5; i++) {
        pthread_create(&con[i], NULL, (void *)consumer, (void *)&a[i]);
    }
    for(int i = 0; i < 5; i++) {
        pthread_join(pro[i], NULL);
    }
    for(int i = 0; i < 5; i++) {
        pthread_join(con[i], NULL);
    }
    pthread_mutex_destroy(&mutex);
    sem_destroy(&empty);
    sem_destroy(&full);
    return 0;
    
}















4
#include <stdio.h>
int main()
{
	// P0, P1, P2, P3, P4 are the Process names here

	int n, m, i, j, k;
	n = 5; // Number of processes
	m = 3; // Number of resources
	int alloc[5][3] = { { 0, 1, 0 }, // P0 // Allocation Matrix
						{ 2, 0, 0 }, // P1
						{ 3, 0, 2 }, // P2
						{ 2, 1, 1 }, // P3
						{ 0, 0, 2 } }; // P4

	int max[5][3] = { { 7, 5, 3 }, // P0 // MAX Matrix
					{ 3, 2, 2 }, // P1
					{ 9, 0, 2 }, // P2
					{ 2, 2, 2 }, // P3
					{ 4, 3, 3 } }; // P4

	int avail[3] = { 3, 3, 2 }; // Available Resources

	int f[n], ans[n], ind = 0;
	for (k = 0; k < n; k++) {
		f[k] = 0;
	}
	int need[n][m];
	for (i = 0; i < n; i++) {
		for (j = 0; j < m; j++)
			need[i][j] = max[i][j] - alloc[i][j];
	}
	int y = 0;
	for (k = 0; k < 5; k++) {
		for (i = 0; i < n; i++) {
			if (f[i] == 0) {

				int flag = 0;
				for (j = 0; j < m; j++) {
					if (need[i][j] > avail[j]){
						flag = 1;
						break;
					}
				}

				if (flag == 0) {
					ans[ind++] = i;
					for (y = 0; y < m; y++)
						avail[y] += alloc[i][y];
					f[i] = 1;
				}
			}
		}
	}

	int flag = 1;
	
	for(int i=0;i<n;i++)
	{
	if(f[i]==0)
	{
		flag=0;
		printf("The following system is not safe");
		break;
	}
	}
	
	if(flag==1)
	{
	printf("Following is the SAFE Sequence\n");
	for (i = 0; i < n - 1; i++)
		printf(" P%d ->", ans[i]);
	printf(" P%d", ans[n - 1]);
	}
	

	return (0);

}


6
#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <time.h>

int accessSeats[2];
int customers[2];
int barber[2];
int freeaccessSeats[2];

void randomWait();
void barber_process();
void customer_process();

void V(int pd[]) {
   int a=1;
   write(pd[1],&a,sizeof(int));
}

void P(int pd[]) {
   int a;
   read(pd[0],&a,sizeof(int));
}

void main() {
   int i;
   pipe(accessSeats);
   pipe(customers);
   pipe(barber);
   pipe(freeaccessSeats); 
	
   V(accessSeats); 
	
   int num = 3; // waiting room seats = 3
   write(freeaccessSeats[1],&num,sizeof(int));
	
   if (fork() == 0) {
      srand(time(0)+1); //Random Seed  
      barber_process();
      return;
   }
   
   for (i = 1; i <= 5; i++) { // five customers
      if (fork() == 0) {
         srand(time(0)+2*i); // different random seed 
         customer_process();
         return;
      }
   }
   sleep(10);
   printf("\ndone\n\n");
}

void barber_process() {
   int i; 
   int num; //number of free seats
   for (i = 1; i <= 10; ++i) {
      printf("Barber %d is trying to get a customer\n",i);
      P(customers); 
      printf("Barber %d is waiting for the seat to become free\n",i);
      P(accessSeats); 
      read(freeaccessSeats[0],&num,sizeof(int));
      num++; 
      write(freeaccessSeats[1],&num,sizeof(int));
      printf("Barber %d is increasing the number of free accessSeats to %d\n",i,num);
      V(barber); 
      V(accessSeats); 
      printf("Barber is now cutting hair %d\n",i);
      randomWait();	
   }
}

void customer_process() {
   int i;
   int num;
   for (i = 1; i <= 2; ++i) {
      printf("New customer trying to find a seat\n");
      P(accessSeats); 
      read(freeaccessSeats[0],&num,sizeof(int));
      if (num > 0) 
      {
         num--;
         write(freeaccessSeats[1],&num,sizeof(int));
         printf("Customer left seat in waiting room. The total free accessSeats are now: %d\n",num);
         V(customers); 
         V(accessSeats); 
         printf("Customer is now waiting for the barber\n");
         P(barber); 
         printf("Customer is now getting a hair cut\n");
      }
      else
      {
         write(freeaccessSeats[1],&num,sizeof(int));
         V(accessSeats); 
         printf("No free chairs in waiting room\n");
      }
      randomWait();
   }
}

void randomWait() { // random delay 
   int delay;
   delay = random() % 9999999999;
   printf("  - wait: %d\n", delay); // debugging - value of wait time   
}
Smokers 

Semaphore smoker_match=0;
Semaphore smoker_paper=0;
Semaphore smoker_tobacco=0;
Semaphore agent=0;
Semaphore lock=1;
void agent{
while(1){
wait( lock );
randNum = rand( 1, 3 ); // Pick a random number from 1-3
if ( randNum == 1 ) {
// Put tobacco on table
// Put paper on table
signal( smoker_match ); // Wake up smoker with match
} else if ( randNum == 2 ) {
// Put tobacco on table
// Put match on table
signal( smoker_paper ); // Wake up smoker with paper
} else {
// Put match on table
// Put paper on table
signal( smoker_tobacco ); // Wake up smoker with tobacco
}
signal( lock );
wait( agent ); // Agent sleeps
}
}
void Smoker1{
while(1){
wait( smoker_tobacco ); // Sleep right away
wait( lock );
// Pick up match
// Pick up paper
signal( agent );
signal( lock );
// Smoke (but don't inhale).
}
}
void Smoker2{
while(1){
wait( smoker_ match ); // Sleep right away
wait( lock );
// Pick up tobacco
// Pick up paper
signal( agent );
signal( lock );
// Smoke (but don't inhale).
}
}
void Smoker3{
while(1){
wait( smoker_ paper ); // Sleep right away
wait( lock );
// Pick up match
// Pick up tobacco
signal( agent );
signal( lock );
// Smoke (but don't inhale).
}
}
