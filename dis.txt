Q1 FCFS
#include<stdio.h>
#include<stdlib.h>
#include<math.h>

int main(){

    int totalhead_movement=0,intialpos,n;
    scanf("%d",&n);
    int arr[n];
    for(int i=0;i<n;i++){

        scanf("%d",&arr[i]);
    }

    printf("Enter the initial position--> ");
    scanf("%d",&intialpos);



    for(int i=0;i<n;i++){
        totalhead_movement+=abs(intialpos-arr[i]);


        intialpos=arr[i];
    }
    printf("The total movement is %d",totalhead_movement);


}


Q2  SSTF

#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>
#include<limits.h>
#include<string.h>


int findclosestCylinder(int initial_pos, bool visited[],int request_queue[],int n)
{
  int min=INT_MAX,min_index=-1;
  for(int i=0;i<n;i++)
  {
      if(visited[i] == false && abs(initial_pos - request_queue[i]) < min)
      {
          min = abs(initial_pos - request_queue[i]);
          min_index = i;
      }
  }
  return min_index;

}

int applySSTFAlgo(int request_queue[], int initial_pos,bool visited[],int seek_sequence[],int n)
{
    int i=0;
    int completed=0,total_head_movement=0;
    while(completed!=n)
    {
      int min_index=findclosestCylinder(initial_pos,visited,request_queue,n);

      total_head_movement += abs(initial_pos - request_queue[min_index]);
      initial_pos = request_queue[min_index];
      seek_sequence[i++] = request_queue[min_index];
      visited[min_index]=true;
      completed++;
    }

    return total_head_movement;
}

int main()
{
    int total_cylinders,total_head_movement,initial_pos,n;



    printf("\nEnter the no. of cylinders to enter in Request queue:\n");
    scanf("%d",&n);

    int request_queue[n];
    int seek_sequence[n];

    printf("\nEnter the cylinders no. in Request queue :\n");
    for(int i=0;i<n;i++)
     scanf("%d",&request_queue[i]);
    printf("\nEnter the initial Position of RW head: ");
    scanf("%d",&initial_pos);

    bool visited[n];        //to keep track of visited cylinder
    memset(visited,false,n*sizeof(bool));



    total_head_movement = applySSTFAlgo(request_queue,initial_pos,visited,seek_sequence,n);



    printf("\n\n*********** OUTPUT **********");
    printf("\nSeek Sequence: ");
    for(int i=0;i<n;i++)
     printf("%d ",seek_sequence[i]);

    printf("\nTotal No. of Head Movements = %d\n",total_head_movement);
    printf("\nAverage head movements = %.2f\n\n",(float)total_head_movement/n);

    return 0;
}


Q3  SCAN


#include<stdio.h>
#include<stdlib.h>
#include<limits.h>

int comparator(const void * a, const void *b)
{
   int x =*(int *)a;
   int y =*(int *)b;
   if(x<y)
     return -1;  // No sorting
   else if( x>=y) // = is for stable sort
    return 1;    // Sort
}

int min_element(int request_queue[],int n)
{
    int min = INT_MAX;
    for(int i=0;i<n;i++)
    {
       if(request_queue[i] < min)
          min = request_queue[i];
    }
    return min;
}

int max_element(int request_queue[],int n)
{
   int max = INT_MIN;
   for(int i=0;i<n;i++)
   {
      if(request_queue[i] > max)
          max = request_queue[i];
   }
    return max;
}


int applySCANAlgo(int total_cylinders,int request_queue[], int initial_pos, int seek_sequence[], int direction,int *sequence_size,int n)
{
	int total_head_movement=0,j=0,k=0;
	int left[n+1], right[n+1];  //in worst case(corner cases), size will be n+1

	// appending end values
	// which has to be visited
	// before reversing the direction
	if(direction == 0)
    {
        if(initial_pos > min_element(request_queue,n))
     		right[j++]=total_cylinders-1;
        right[j++]=initial_pos;
    }
    else if(direction == 1)
    {
        if(initial_pos < max_element(request_queue,n))
		   left[k++]=0;  //here  0 is initial cylinder of HDD
        left[k++]=initial_pos;
    }


	for (int i = 0; i<n; i++) {
		if (request_queue[i] < initial_pos)
			left[k++]=request_queue[i];
		if (request_queue[i] > initial_pos)
			right[j++]=request_queue[i];
	}

	// sorting left and right arrays
    qsort((void *)left,k, sizeof(int),comparator);
    qsort((void *)right,j, sizeof(int),comparator);


	// run the while loop two times one by one scanning right and left of the head
	int completed = 2;
	while (completed--)
    {
        if (direction == 0)
        {
			for (int i = 0; i < j; i++)
            {
                // calculate absolute distance
                total_head_movement += abs(initial_pos - right[i]);
                initial_pos = right[i];
                // appending current track to seek sequence
                seek_sequence[*sequence_size]=right[i];
                (*sequence_size)++;

            }
            direction = 1;
		}

		else if (direction == 1)
        {
			for (int i = k - 1; i >= 0; i--)
            {
                // calculate absolute distance
				total_head_movement +=  abs(initial_pos - left[i]);
                initial_pos = left[i];
                // appending current track to seek sequence
                seek_sequence[*sequence_size]=left[i];
                (*sequence_size)++;
            }
            direction = 0;
		}

	}  //end of while
    return total_head_movement;
}  //end of applySCANALgo()

int main()
{
    int total_cylinders,total_head_movement=0,initial_pos,n,direction,pos;


    printf("\nEnter the total no. of cylinders in HDD:\n");
    scanf("%d",&total_cylinders);

    printf("\nEnter the no. of cylinders to enter in Request queue:\n");
    scanf("%d",&n);

    int request_queue[n];
    int seek_sequence[n+10];   // i.e take somewaht bigger size than n
    int sequence_size=0;

    printf("\nEnter the cylinders no. in Request queue :\n");
    for(int i=0;i<n;i++)
     scanf("%d",&request_queue[i]);
    printf("\nEnter the initial Position of RW head: ");
    scanf("%d",&initial_pos);
    printf("\nEnter the direction in which Read Write head is moving:\n ");
    printf("\nEnter 0 if moving to higher cylinder else Enter 1: ");
    scanf("%d",&direction);

    if(initial_pos < 0 || initial_pos > total_cylinders - 1)
    {
        printf("Wrong Initial Position Enetered !!");
        exit(0);
    }

    total_head_movement = applySCANAlgo(total_cylinders,request_queue,initial_pos,seek_sequence,direction,&sequence_size,n);



    printf("\n\n*********** OUTPUT **********");
    printf("\nSeek Sequence: ");
    for(int i=0;i<sequence_size;i++)
     printf("%d ",seek_sequence[i]);

    printf("\nTotal No. of Head Movements = %d\n",total_head_movement);
    printf("\nAverage head movements = %.2f\n\n",(float)total_head_movement/n);

    return 0;
}

Q4 CSCAN
#include<stdio.h>
int main()
{
            int queue[20],n,head,i,j,k,seek=0,max,diff,temp,queue1[20],queue2[20],
                        temp1=0,temp2=0;
            float avg;
            printf("Enter the max range of disk\n");
            scanf("%d",&max);
            printf("Enter the initial head position\n");
            scanf("%d",&head);
            printf("Enter the size of queue request\n");
            scanf("%d",&n);
            printf("Enter the queue of disk positions to be read\n");
            for(i=1;i<=n;i++)
            {
                        scanf("%d",&temp);
                        if(temp>=head)
                        {
                                    queue1[temp1]=temp;
                                    temp1++;
                        }
                        else
                        {
                                    queue2[temp2]=temp;
                                    temp2++;
                        }
            }
            for(i=0;i<temp1-1;i++)
            {
                        for(j=i+1;j<temp1;j++)
                        {
                                    if(queue1[i]>queue1[j])
                                    {
                                                temp=queue1[i];
                                                queue1[i]=queue1[j];
                                                queue1[j]=temp;
                                    }
                        }
            }
            for(i=0;i<temp2-1;i++)
            {
                        for(j=i+1;j<temp2;j++)
                        {
                                    if(queue2[i]>queue2[j])
                                    {
                                                temp=queue2[i];
                                                queue2[i]=queue2[j];
                                                queue2[j]=temp;
                                    }
                        }
            }
            for(i=1,j=0;j<temp1;i++,j++)
            queue[i]=queue1[j];
            queue[i]=max;
            queue[i+1]=0;
            for(i=temp1+3,j=0;j<temp2;i++,j++)
            queue[i]=queue2[j];
            queue[0]=head;
            for(j=0;j<=n+1;j++)
            {
                        diff=abs(queue[j+1]-queue[j]);
                        seek+=diff;
                        printf("Disk head moves from %d to %d with seek                                                                           %d\n",queue[j],queue[j+1],diff);
            }
            printf("Total seek time is %d\n",seek);
            avg=seek/(float)n;
            printf("Average seek time is %f\n",avg);
            return 0;
}
